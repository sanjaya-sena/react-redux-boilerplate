import React, { Component } from 'react';
import './App.css';
import AdminPanel from './components/templates/AdminPanel';
import Login from './components/auth/Login';
import { Provider } from "react-redux";
import store from "./store";
import { BrowserRouter } from 'react-router-dom'


class App extends Component {
  render() {
      let auth = JSON.parse(localStorage.getItem('auth'));
    return (
        <Provider store={store}>
            <BrowserRouter>
                {auth && auth.user && auth.token?(
                    <AdminPanel />
                ):(
                    <Login />
                )}
            </BrowserRouter>
        </Provider>
    );
  }
}

export default App;

==============================

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { fetchUsers } from "../../actions/userActions";
import { Badge, Card, CardBody, CardHeader, Col, Row, Table } from 'reactstrap';
import {  AgGridReact } from 'ag-grid-react';
import 'ag-grid/dist/styles/ag-grid.css';
import 'ag-grid/dist/styles/ag-theme-bootstrap.css';
import 'ag-grid/dist/styles/ag-theme-material.css';
import 'ag-grid/dist/styles/ag-theme-balham.css';


class Users extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            gridOptions : {
            columnDefs: [
                {headerName: "ID", field: "id",
                    width: 100,
                    filterParams: {newRowsAction: 'keep'},
                    suppressSizeToFit: true,
                    checkboxSelection: function(params) {
                        // we put checkbox on the name if we are not doing grouping
                        return params.columnApi.getRowGroupColumns().length === 0;
                    },
                    headerCheckboxSelection: function(params) {
                        // we put checkbox on the name if we are not doing grouping
                        return params.columnApi.getRowGroupColumns().length === 0;
                    }
                },
                {headerName: "User Name", field: "name"},
                {headerName: "Email", field: "email"}
            ],
                rowSelection:"multiple",
                showToolPanel: true,
                popupParent: document.querySelector("body")
            },
            api:{}

        };
        this.onExportClick = this.onExportClick.bind(this);
        this.test = this.test.bind(this);
    }

    componentWillMount(){
       this.props.fetchUsers();
    }

    componentWillReceiveProps(nextProps){

    };

    componentDidMount(){
        // this.setState({rowData:this.props.users});
    }
    test(a){
        this.setState({
            api:a.api
        });
        a.api.sizeColumnsToFit();
    }
    onExportClick(){
        this.state.api.exportDataAsCsv(this.state.api.getDataAsCsv());
    }


    render(){
        return (

            <div className="animated fadeIn">
                <Row>
                    <Col lg={12}>
                        <Card>
                            <CardHeader>
                                <strong><i className="fa fa-user"> </i> Users List</strong>
                            </CardHeader>
                            <CardBody>
                                <Row>
                                    <Col>
                                        <button className="btn btn-success btn-sm pull-right" onClick={this.onExportClick}>Export</button>
                                    </Col>
                                </Row>
                                <br/>
                                <Row >
                                    <Col lg={12} className="ag-theme-balham"
                                         style={{
                                             height: '350px'
                                         }}>
                                        <AgGridReact
                                            rowData={this.props.users}
                                            suppressRowClickSelection
                                            enableColResize
                                            enableSorting
                                            enableFilter
                                            groupHeaders
                                            pagination
                                            paginationAutoPageSize
                                            gridOptions={this.state.gridOptions}
                                            onGridReady={this.test}
                                        >
                                        </AgGridReact>
                                    </Col>
                                </Row>
                            </CardBody>
                        </Card>
                    </Col>
                </Row>
            </div>
        );
    };
}
// enableSorting: true,
//     suppressRowClickSelection: true,
//     groupSelectsChildren: true,
//     debug: true,
//     rowSelection: 'multiple',
//     enableColResize: true,
//     rowGroupPanelShow: 'always',
//     pivotPanelShow: 'always',
//     enableRangeSelection: true,
//     columnDefs: columnDefs,
//     pagination: true,
//     paginationPageSize: 10,
//     autoGroupColumnDef: autoGroupColumnDef,
//     paginationNumberFormatter: function(params) {
//     return '[' + params.value.toLocaleString() + ']';
// },
// defaultColDef: {
//     editable: true,
//         enableRowGroup: true,
//         enablePivot: true,
//         enableValue: true
// }

Users.propTypes = {
    fetchUsers: PropTypes.func.isRequired,
    users: PropTypes.array.isRequired
};

const mapStateToProps = state => ({
    users: state.users.items
});

export default connect(mapStateToProps,{ fetchUsers })(Users);
